#!/usr/bin/env node

var cp = require('child_process');
var fs = require('fs');
var os = require('os');
var path = require('path');
var program = require('commander');
require('colors');

var f2etestLocal  = require("../index");

var pkg = require('../package.json');

program.version(pkg.version);

program.on('--help', function(){
    console.log('  Examples:');
    console.log('');
    console.log('    f2etest-local run --port 1080');
    console.log('    f2etest-local start --port 1080');
    console.log('    f2etest-local start --port 1080 --server http://f2etest.xxx.com/ --name test1 --apikey keystring');
    console.log('    f2etest-local stop');
    console.log('');
});

var homedir = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
var pidFile = path.resolve(homedir, 'f2etest-local.pid');
var logFile = path.resolve(homedir, 'f2etest-local.log');
var runCommand = program.command('run')
    .description('run local proxy')
    .action(function(options){
        killOldProxy(function(){
            function onFinish(msg){
                // 写入pid
                fs.writeFileSync(pidFile, process.pid);
                // 监测kill信号
                fs.watchFile(pidFile, {interval: 100},function(curr){
                    if(curr.size > 0 && fs.readFileSync(pidFile).toString() === 'kill'){
                        f2etestLocal.stop(function(){
                            if(fs.existsSync(pidFile)){
                                fs.unlinkSync(pidFile);
                            }
                            process.exit();
                        });
                    }
                });
            }
            function onError(e){
                if(e.code === 'EADDRINUSE'){
                    console.log('Run failed, port in use : %d'.red, e.port);
                    process.exit(1);
                }
            }
            f2etestLocal.start({
                server: options.server,
                name: options.name,
                apikey: options.apikey,
                port: options.port,
                mode: options.mode,
                hosts: options.hosts,
                forwardHost: options['forward-host'],
                forwardPort: options['forward-port']
            }, onFinish, onError);
            // 关闭时，停止代理，取消注册
            process.on('SIGINT', function() {
                f2etestLocal.stop(function(){
                    if(fs.existsSync(pidFile)){
                        fs.unlinkSync(pidFile);
                    }
                    process.exit();
                });
            });
        });
    });

var startCommand = program.command('start')
    .description('start local proxy in daemon')
    .action(function(options){
        var rawArgs = program.rawArgs;
        var nodePath = rawArgs.shift();
        rawArgs[1] = 'run';

        killOldProxy(function(){
            var proxy = cp.spawn(nodePath, rawArgs, {
                detached: true,
                stdio: ['ignore', fs.openSync(logFile, 'w+'), 'ignore']
            });
            proxy.on('exit', function (code) {
                if(code !== 0 && fs.existsSync(logFile)){
                    console.log(fs.readFileSync(logFile).toString().red);
                }
                clearInterval(_timer);
            });

            var count = 0;
            var _timer = setInterval(function(){
                if(fs.existsSync(pidFile)){
                    if(fs.existsSync(logFile)){
                        console.log(fs.readFileSync(logFile).toString().green);
                    }
                    proxy.unref();
                    count = 30;
                }
                if(count++ >= 30){
                    clearInterval(_timer);
                    process.exit();
                }
            }, 100);
        });
    });

initCommandOptions(runCommand);
initCommandOptions(startCommand);

function initCommandOptions(command){
    command.option('-p, --port <number>', 'set the proxy port number, default:random port')
    .option('-s, --server <url>', 'set f2etest server url')
    .option('-n, --name <name>', 'your f2etest account name')
    .option('-k, --apikey <apikey>', 'your f2etest apikey')
    .option('-m, --mode <hosts|forward>', 'set the local proxy mode, default: hosts')
    .option('--hosts <hosts string>', 'set the hosts text')
    .option('--forward-host <ip>', 'set the forward proxy ip')
    .option('--forward-port <port>', 'set the forward proxy port');
}

program.command('stop')
    .description('stop local proxy in daemon')
    .action(function(){
        killOldProxy();
    });

function killOldProxy(callback){
    // kill old proxy
    if(fs.existsSync(pidFile)){
        fs.writeFileSync(pidFile, 'kill');
        var _timer;
        fs.watchFile(pidFile, {interval: 100}, function(cuur){
            if(cuur.size === 0){
                console.log('f2etest-local stopped'.green);
            }
            fs.unwatchFile(pidFile);
            clearTimeout(_timer);
            callback && callback();
        });
        // 超时，认为进程不存在
        _timer = setTimeout(function(){
            fs.unwatchFile(pidFile);
            fs.unlinkSync(pidFile);
            callback && callback();
        }, 3000);
    }
    else{
        callback && callback();
    }
}

program.parse(process.argv);
