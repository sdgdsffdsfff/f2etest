#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var F2etestJsUnit = require('../');

var pkg = require('../package.json');

require('colors');

function map(val) {
    var objMap = {};
    val.split(',').forEach(function(item){
        var arrItem = item.split(/\s*=\s*/);
        objMap[arrItem[0]] = arrItem[1]?arrItem[1]:true;
    });
    return objMap;
}

program.on('--help', function(){
    console.log('  Examples:');
    console.log('');
    console.log('    f2etest-jsunit http://xxx.com/test.html --server http://f2etest.xxx.com/ --userid xxx --apikey xxx --browsers chrome,ie 8');
    console.log('    f2etest-jsunit test.json (load config)');
    console.log('    f2etest-jsunit (load default config: jsunit.json)');
    console.log('');
});


program
    .version(pkg.version)
    .usage('<url|config> [options]')
    .option('--server <url>', 'f2etest server url')
    .option('--userid <string>', 'f2etest userid')
    .option('--apikey <string>', 'f2etest apikey')
    .option('--browsers <string>', 'browsers list, example: "chrome,ie 8"')
    .option('--hosts <string>', 'hosts')
    .option('--coverageinclude <string>', 'coverage include, sample: /\/src\//i')
    .option('--coverageexclude <string>', 'coverage exclude, example: /\/lib\//i')
    .option('--coveragebeautify <1|0>', 'coverage beautify, 1 for enabled')
    .option('--timeout <number>', 'stop when test timeout')
    .option('--delay <number>', 'delay close browser for debug')
    .option('--append <string>', 'append message after test')
    .option('--no-color', 'disable colors')
    .parse(process.argv);

var url = program.args[0];
if(url === undefined){
    url = 'jsunit.json';
}
// load config
var config = {};
if(/^https?:\/\//i.test(url) === false && fs.existsSync(url)){
    try{
        url = path.resolve(process.cwd(), url);
        config = require(url);
    }
    catch(e){}
    url = config.url;
}
var server = program.server || config.server;
if(/\/$/.test(server) === false){
    server += '/';
}
var userid = program.userid || config.userid;
var apikey = program.apikey || config.apikey;
var browsers = program.browsers || config.browsers;
var hosts = program.hosts || config.hosts;
var coverageinclude = program.coverageinclude || config.coverageinclude;
var coverageexclude = program.coverageexclude || config.coverageexclude;
var coveragebeautify = program.coveragebeautify || config.coveragebeautify;
var timeout = program.timeout || config.timeout;
var delay = program.delay || config.delay;
var append = program.append || config.append;

var symbols = {
  ok: '✓',
  err: '✖'
};
if (process.platform === 'win32') {
  symbols.ok = '\u221A';
  symbols.err = '\u00D7';
}

if(server && userid && apikey && browsers && url){
    console.log('');
    console.log('  ===================================================================================================='.green);
    console.log('    JsUnit reporter: '.green+ url.green.bold);
    console.log('  ===================================================================================================='.green);
    console.log('');
    var browserCount = 0, failedBrowserCount = 0;
    var allTestPassed = 0, allTestFailed = 0, allTestCount = 0;
    var allLineCount = 0, allLineCovered = 0;
    var allBranchCount = 0, allBranchCovered = 0;
    var allFunctionCount = 0, allFunctionCovered = 0;
    var startTime = new Date().getTime();
    F2etestJsUnit.run({
        server: server,
        userid: userid,
        apiKey: apikey,
        browsers: browsers,
        url: url,
        hosts: hosts,
        coverageInclude: coverageinclude,
        coverageExclude: coverageexclude,
        coverageBeautify: coveragebeautify,
        timeout: timeout,
        delay: delay
    }, function(error, result, isEnd){
        var browserName, browserVersion;
        var testTitle;
        var testMessage;
        browserCount ++;
        if(error){
            var config = result;
            browserName = config.browserName;
            browserVersion = config.browserVersion;
            testTitle = '    '+browserName + (browserVersion?' '+browserVersion:'') + ':';
            testMessage = '        '+String(error);
            allTestFailed ++;
            allTestCount ++;
            failedBrowserCount ++;
            console.log(testTitle.red.bold);
            console.log('    -----------------------------------------------------------'.red);
            console.log(testMessage.red);
            console.log('');
        }
        else{
            var taskId = result.taskId;
            result = result.result;
            browserName = result.browserName;
            browserVersion = result.browserVersion;
            var testResult = result.testResult;
            var testSummary = testResult && testResult.summary;
            var testPassed = testSummary && testSummary.passed || 0;
            allTestPassed += testPassed;
            var testCount = testSummary && testSummary.all || 0;
            allTestCount += testCount > 0 ? testCount : 1;
            var testFailed = testSummary && testSummary.failed || 0;
            allTestFailed += testCount > 0 ? testFailed : 1;
            var testRatio = testCount > 0 ? getFixed(testPassed/testCount*100) : 0;
            var testDuration = testSummary.duration;
            var coverResult = result.coverResult;
            var coverSummary = coverResult && coverResult.summary;
            var lineCount = 0, lineCovered = 0, lineRatio = 0;
            var branchCount = 0, branchCovered = 0, branchRatio = 0;
            var functionCount = 0, functionCovered = 0, functionRatio = 0;
            if(coverSummary){
                lineCount = coverSummary.lineCount;
                allLineCount += lineCount;
                lineCovered = coverSummary.lineCovered;
                allLineCovered += lineCovered;
                lineRatio = coverSummary.lineRatio;
                branchCount = coverSummary.branchCount;
                allBranchCount += branchCount;
                branchCovered = coverSummary.branchCovered;
                allBranchCovered += branchCovered;
                branchRatio = coverSummary.branchRatio;
                functionCount = coverSummary.functionCount;
                allFunctionCount += functionCount;
                functionCovered = coverSummary.functionCovered;
                allFunctionCovered += functionCovered;
                functionRatio = coverSummary.functionRatio;
            }
            var color, symbol;
            if(testCount > 0 && testFailed === 0){
                color = 'green';
                symbol = symbols.ok;
            }
            else{
                color = 'red';
                symbol = symbols.err;
            }
            testTitle = '    ' + browserName + (browserVersion?' '+browserVersion:'') + ':'
            testMessage = '        '+symbol.bold+' Tests passed: '+String(testRatio+'%').bold+' ('+testPassed+'/'+testCount+') in '+testDuration+' ms\r\n';
            testMessage += '        Line covered: '+String(lineRatio+'%').bold+' ('+lineCovered+'/'+lineCount+'), Branch covered: '+branchRatio+'% ('+branchCovered+'/'+branchCount+'), Function covered: '+functionRatio+'% ('+functionCovered+'/'+functionCount+')\r\n';
            testMessage += '        More info: '+server+'jsunit_result?id='+taskId;
            console.log(testTitle[color].bold);
            console.log('    --------------------------------------------------------------------------------------------------'[color])
            console.log(testMessage[color]);
            console.log('');
        }
        if(isEnd){
            var allTestRatio = allTestCount > 0 ? getFixed(allTestPassed/allTestCount*100) : 0;
            var allLineRatio = allLineCount > 0 ? getFixed(allLineCovered/allLineCount*100) : 0;
            var allBrandRatio = allBranchCount > 0 ? getFixed(allBranchCovered/allBranchCount*100) : 0;
            var allFunctionRatio = allFunctionCount > 0 ? getFixed(allFunctionCovered/allFunctionCount*100) : 0;
            var color, symbol;
            if(allTestCount > 0 && allTestFailed === 0){
                color = 'green';
                symbol = symbols.ok;
            }
            else{
                color = 'red';
                symbol = symbols.err;
            }
            var message;
            if(failedBrowserCount < browserCount){
                message = '    '+symbol.bold+' Tests passed: '+String(allTestRatio+'%').bold+' ('+allTestPassed+'/'+allTestCount+') in '+(new Date().getTime()-startTime)+' ms\r\n';
                message += '    Line covered: '+String(allLineRatio+'%').bold+' ('+allLineCovered+'/'+allLineCount+'), Branch covered: '+allBrandRatio+'% ('+allBranchCovered+'/'+allBranchCount+'), Function covered: '+allFunctionRatio+'% ('+allFunctionCovered+'/'+allFunctionCount+')';
            }
            else{
                message = '    All browser tests failed!';
            }
            console.log('  ===================================================================================================='[color]);
            console.log(message[color]);
            console.log('  ===================================================================================================='[color]);
            if(append){
                var mapVars = {
                    testPassed: allTestPassed,
                    testFailed: allTestFailed,
                    testSkiped: allTestCount - allTestFailed - allTestPassed,
                    testCount: allTestCount,
                    lineCovered: allLineCovered,
                    lineCount: allLineCount,
                    branchCovered: allBranchCovered,
                    branchCount: allBranchCount,
                    functionCovered: allFunctionCovered,
                    functionCount: allFunctionCount
                };
                append = append.replace(/\{!([^\{\}]+)\}/g, function(all, name){
                    var value = mapVars[name];
                    return value !== undefined ? value : all;
                });
                append = append.replace(/\\n/g, '\n');
                console.log(append);
            }
            if(allTestFailed > 0){
                process.exit(1);
            }
            else{
                process.exit(0);
            }
        }
    });
}
else{
    console.log('Parameters required: server, userid, apikey, browsers, url'.red);
    process.exit(1);
}

function getFixed(num){
    return Math.round(num*100)/100;
}
